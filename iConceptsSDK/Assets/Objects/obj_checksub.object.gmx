<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Check_Sub</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.confirm_sub = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
                if ds_map_find_value(async_load, "id") == global.confirm_sub
                {   
                        /*ini_open('etisalat.ini' );
                            var plan_end = ini_read_real( 'data', 'plan_end', 0);
                        ini_close();
                        
                        show_debug_message("Get Plan Expiry Date:: "+string(plan_end));*/
                        
                        self.map = json_decode(async_load[? "result"])
                        //show_message(string(jsonmap))
                        if(self.map == -1)
                        {
                            show_debug_message("invalid result")
                            exit;
                        }
                        if(ds_map_exists(self.map, "planenddate"))
                            {
                                var plan_end = self.map[? "planenddate"];
                                var plan_start = self.map[? "planstartdate"];
                                var plan_type = self.map[? "plan"];
                                var plan_active = self.map[? "planactive"];
                                var response = self.map[? "responsestring"];
                                show_debug_message("check_sub::RespCode:: "+string(response));
                                sprite_index =   obj_checksub;  
                                if(string(plan_active) == "1"){
                                    show_debug_message("is Active");
                                    sprite_index = obj_subactive;
                                    obj_play_btn.visible = true;
                                    
                                }else if(string(plan_active) == "0"){
                                    show_debug_message("is inActive");
                                    obj_20btn.visible = true;
                                    obj_50btn.visible = true;
                                    obj_150btn.visible = true;
                                }
                                
                                /*if(file_exists("etisalat.sav")) file_delete("etisalat.sav");
                                var saveFile = file_text_open_write("etisalat.sav");
                                file_text_write_real(saveFile, string(plan_end));
                                file_text_close(saveFile);*/
                                /*var end_date = string(plan_end);
                                ini_open('etisalat.ini' );
                                    ini_write_real( 'data', 'plan_end',  end_date);
                                ini_close();*/
                               
                               exit;
                           }
                }
                
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
